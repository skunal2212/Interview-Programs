# TCS Python aws position interview Questions

Q. difference between set and tupples ?

| Use Case                     | `set`           | `tuple`                                       |
| ---------------------------- | --------------- | --------------------------------------------- |
| Fast membership testing      | ✅ `x in my_set` | Slower than set                               |
| Hashable (can be dict key)   | ❌ No            | ✅ Yes (if it contains only hashable elements) |
| Use as function return group | ❌ Not common    | ✅ Very common                                 |
| Syntax                       | {1, 2, 3} or set() | (1, 2, 3)                                     |

| Feature     | `set` | `tuple` |
| ----------- | ----- | ------- |
| Ordered?    | ❌ No  | ✅ Yes   |
| Mutable?    | ✅ Yes | ❌ No    |
| Duplicates? | ❌ No  | ✅ Yes   |
| Hashable?   | ❌ No  | ✅ Yes   |

set Example: 
s = {1, 2, 3, 2}
print(s)  # Output: {1, 2, 3}
s.add(4)

tupple Example:
t = (1, 2, 3, 2)
print(t)  # Output: (1, 2, 3, 2)
# t[0] = 5  → ❌ Error (tuples are immutable)




1st program:
list = [5,6,5,7,1,8,1,7,2,9,4,3]
list1 = [*list] # syntax of spread operator in python for create deep copy
list1.sort() # sorting not impacted on list because list1 is a deep copy
print(list1) # o/p => [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 9]
print(list) # o/p => [5, 6, 5, 7, 1, 8, 1, 7, 2, 9, 4, 3]


2nd program:
# print a dictionary from a list with store element occurrence count as the value and element as a key
from collections import Counter   # import counter package
counts = Counter(list)
print(counts) # o/p => Counter({5: 2, 7: 2, 1: 2, 6: 1, 8: 1, 2: 1, 9: 1, 4: 1, 3: 1})

# if we want occurances count more than 1
duplicates = {key: val for key, val in counts.items() if val > 1}
print(duplicates) # o/p => {5: 2, 7: 2, 1: 2}


3rd program: 
# print every even digit number from range 1000 to 3001
for i in range(1000,3001):
    if (i % 2 == 0):
        digit = str(i)
        if all(int(d) % 2 == 0 for d in digit):
            print(i)
